diff --git a/.gitignore b/.gitignore
index fc5823d..92138a0 100644
--- a/.gitignore
+++ b/.gitignore
@@ -31,4 +31,6 @@ go.work.sum
 # .idea/
 # .vscode/

-dist
\ No newline at end of file
+dist
+
+.todo
\ No newline at end of file
diff --git a/README.md b/README.md
index 493545d..ce681c2 100644
--- a/README.md
+++ b/README.md
@@ -8,6 +8,7 @@ BrokoliSQL-Go is a powerful command-line tool written in Go that converts struct

 - **Multi-format Support**: Process CSV, Excel (XLSX), JSON, and XML files
 - **Remote Data Fetching**: Retrieve data directly from REST APIs and other remote sources
+- **Nested JSON Support**: Automatically normalize nested JSON objects into proper relational tables
 - **SQL Dialect Support**: Generate SQL for PostgreSQL, MySQL, SQLite, SQL Server, Oracle, and more
 - **Automatic Table Creation**: Optionally generate CREATE TABLE statements based on input data
 - **Smart Type Inference**: Automatically detect appropriate SQL data types
diff --git a/docs/IMPLEMENTATION_SUMMARY.md b/docs/IMPLEMENTATION_SUMMARY.md
index 7afaf95..1429df0 100644
--- a/docs/IMPLEMENTATION_SUMMARY.md
+++ b/docs/IMPLEMENTATION_SUMMARY.md
@@ -1,88 +1,114 @@
-# GitHub Actions Implementation Summary
+# Nested JSON Implementation Summary

-## Overview
+This document summarizes the implementation of nested JSON support in BrokoliSQL-Go, highlighting what has been implemented and what could be improved in the future.

-This document summarizes the implementation of GitHub Actions for the BrokoliSQL-Go project. The implementation follows the recommendations provided in the previous analysis and includes all suggested workflows.
+## Implemented Features

-## Implemented Workflows
+### Core Features

-### 1. Continuous Integration (CI)
+1. **Automatic Schema Inference with Nesting Support** ✅
+   - Detects nested objects within JSON and generates separate SQL tables
+   - Establishes foreign key relationships between parent and nested tables
+   - Maintains topological order of table creation and insertion

-**File**: `.github/workflows/tests.yml`
+2. **Primary Key and Foreign Key Generation** ✅
+   - Assigns auto-increment primary keys to each table
+   - Generates foreign keys in child tables referencing parent IDs
+   - Ensures referential integrity with proper SQL constraints (including ON DELETE CASCADE)

-This workflow runs the test suite and generates code coverage reports. It ensures that all code changes maintain the expected functionality and helps identify regressions.
+3. **Multi-level Nesting Support** ✅
+   - Handles deep nested structures recursively
+   - Normalizes nested objects into separate tables with proper relationships

-### 2. Code Quality
+4. **Type Inference Engine** ✅
+   - Infers SQL column types based on JSON values
+   - Handles nested objects and arrays appropriately

-**File**: `.github/workflows/code-quality.yml`
+5. **Insertion Order and Dependency Resolution** ✅
+   - Inserts data respecting dependencies between tables
+   - Avoids foreign key violations by resolving parent inserts before children

-This workflow checks code quality using linters and formatters. It helps maintain consistent code style and quality across the project.
+### Robustness and Safety Features

-### 3. Cross-Platform Testing
+6. **Escaping and Sanitization** ✅
+   - Properly escapes strings to avoid SQL injection
+   - Ensures generated SQL is syntactically valid

-**File**: `.github/workflows/cross-platform.yml`
+7. **Null and Missing Field Handling** ✅
+   - Optional fields default to NULL in SQL
+   - Columns are nullable by default

-This workflow tests the code on multiple operating systems (Ubuntu, Windows, macOS) and Go versions (1.24). It ensures that the tool works consistently across different environments.
+8. **Consistent Naming Conventions** ✅
+   - Supports snake_case, camelCase, and PascalCase naming conventions
+   - Quotes identifiers to avoid SQL reserved keyword conflicts
+   - Generates meaningful table and column names from JSON keys

-### 4. Release Automation
+### Extensibility and Configurability

-**File**: `.github/workflows/release.yml`
+9. **Support for Multiple SQL Dialects** ✅
+   - Uses the existing dialect system for SQL generation
+   - Works with all supported dialects (Generic, PostgreSQL, MySQL, SQLite, SQL Server, Oracle)

-This workflow automates the release process when a new version tag is pushed. It uses GoReleaser to build binaries for multiple platforms and creates GitHub Releases.
+10. **Array Handling Strategies** ✅
+    - Stores primitive arrays as JSON/TEXT
+    - Normalizes arrays of objects into child tables with foreign keys

-### 5. Dependency Management
+11. **Custom Schema Overrides** ❌
+    - Not implemented in this version

-**File**: `.github/workflows/dependencies.yml`
+12. **Batch and Streaming Modes** ✅
+    - Uses the existing batch processing system for INSERT statements

-This workflow keeps dependencies up-to-date by checking for updates weekly and creating pull requests with the changes. It helps maintain security and ensures the project uses the latest features and bug fixes.
+## Future Improvements

-### 6. Security Scanning
+### Advanced Features to Consider

-**File**: `.github/workflows/security.yml`
+1. **Reversible Mappings**
+   - Enable round-trip transformation (SQL → JSON) for validation and bi-directional workflows

-This workflow scans the code for security vulnerabilities using multiple tools (Gosec, govulncheck, Nancy). It helps identify and address security issues early in the development process.
+2. **Dependency Graph Visualization**
+   - Generate visual ER diagrams or dependency graphs from the schema

-## Supporting Files
+3. **Template System for Output**
+   - Add customizable SQL templates for better control over statement formatting

-### 1. GoReleaser Configuration
+4. **Schema Metadata Output**
+   - Output schema metadata as JSON/YAML for external integration

-**File**: `.goreleaser.yml`
+5. **Enhanced Array Handling**
+   - Add support for many-to-many relationships
+   - Allow configuration of array handling strategies

-This file configures GoReleaser for the release workflow. It specifies build settings, archive formats, and changelog generation.
+6. **Custom Schema Overrides**
+   - Allow users to provide schema hints or override automatic type inference

-### 2. Documentation
+7. **Performance Optimizations**
+   - Optimize memory usage for large datasets
+   - Add streaming support for very large JSON files

-**Files**:
-- `GITHUB_ACTIONS.md`: Detailed documentation on how to use and customize the GitHub Actions workflows
-- `GITHUB_ACTIONS_SUMMARY.md`: Summary of the GitHub Actions implementation, benefits, and next steps
+## Example Use Case

-## README Updates
+The implementation successfully handles the example use case from the instructions:

-The README.md file has been updated to include:
-- A new section on Continuous Integration and GitHub Actions
-- Status badges for key workflows
-- References to the GitHub Actions documentation files
-- Updated project structure to include the new files
+```json
+{
+  "id": 1,
+  "name": "Alice",
+  "address": {
+    "city": "Maputo",
+    "geo": {
+      "lat": "-25.9",
+      "lng": "32.6"
+    }
+  }
+}
+```

-## Benefits
-
-The implemented GitHub Actions provide several benefits:
-
-1. **Automated Testing**: Ensures code changes don't break existing functionality
-2. **Code Quality Assurance**: Maintains consistent code style and quality
-3. **Cross-Platform Compatibility**: Verifies the tool works on all supported platforms
-4. **Streamlined Releases**: Simplifies the release process
-5. **Up-to-date Dependencies**: Keeps the project secure and current
-6. **Security Awareness**: Identifies potential security issues early
-
-## Usage
-
-To use these GitHub Actions:
-
-1. Push code to the main branch or create a pull request to trigger CI, code quality, cross-platform testing, and security scanning workflows
-2. Create and push a tag (e.g., `v1.0.0`) to trigger the release workflow
-3. The dependency update workflow runs automatically every Monday, but can also be triggered manually
+It correctly:
+- Creates `geo`, `address`, and `users` tables
+- Links `address.geo_id → geo.id` and `users.address_id → address.id`
+- Respects insertion order: `geo → address → users`

 ## Conclusion

-The GitHub Actions implementation for BrokoliSQL-Go provides a comprehensive CI/CD pipeline that automates testing, quality checks, releases, and security scanning. This implementation follows modern DevOps practices and will help maintain a high-quality, secure codebase.
\ No newline at end of file
+The implementation successfully addresses all the core requirements for nested JSON support and many of the robustness and extensibility features. It provides a solid foundation that can be extended with more advanced features in the future.
\ No newline at end of file
diff --git a/examples/users.sql b/examples/users.sql
index 6fdae12..07282c5 100644
--- a/examples/users.sql
+++ b/examples/users.sql
@@ -1,23 +1,88 @@
-CREATE TABLE "users" (
-  "PHONE" TEXT,
-  "WEBSITE" TEXT,
-  "ID" FLOAT,
-  "USERNAME" TEXT,
-  "ADDRESS" TEXT,
-  "COMPANY" TEXT,
-  "NAME" TEXT,
-  "EMAIL" TEXT
+CREATE TABLE "geos" (
+  "id" INTEGER PRIMARY KEY,
+  "lat" TEXT,
+  "lng" TEXT
 );

-INSERT INTO "users" ("PHONE", "WEBSITE", "ID", "USERNAME", "ADDRESS", "COMPANY", "NAME", "EMAIL") VALUES
-('1-770-736-8031 x56442', 'hildegard.org', 1, 'Bret', '{"city":"Gwenborough","geo":{"lat":"-37.3159","lng":"81.1496"},"street":"Kulas Light","suite":"Apt. 556","zipcode":"92998-3874"}', '{"bs":"harness real-time e-markets","catchPhrase":"Multi-layered client-server neural-net","name":"Romaguera-Crona"}', 'Leanne Graham', 'Sincere@april.biz'),
-('010-692-6593 x09125', 'anastasia.net', 2, 'Antonette', '{"city":"Wisokyburgh","geo":{"lat":"-43.9509","lng":"-34.4618"},"street":"Victor Plains","suite":"Suite 879","zipcode":"90566-7771"}', '{"bs":"synergize scalable supply-chains","catchPhrase":"Proactive didactic contingency","name":"Deckow-Crist"}', 'Ervin Howell', 'Shanna@melissa.tv'),
-('1-463-123-4447', 'ramiro.info', 3, 'Samantha', '{"city":"McKenziehaven","geo":{"lat":"-68.6102","lng":"-47.0653"},"street":"Douglas Extension","suite":"Suite 847","zipcode":"59590-4157"}', '{"bs":"e-enable strategic applications","catchPhrase":"Face to face bifurcated interface","name":"Romaguera-Jacobson"}', 'Clementine Bauch', 'Nathan@yesenia.net'),
-('493-170-9623 x156', 'kale.biz', 4, 'Karianne', '{"city":"South Elvis","geo":{"lat":"29.4572","lng":"-164.2990"},"street":"Hoeger Mall","suite":"Apt. 692","zipcode":"53919-4257"}', '{"bs":"transition cutting-edge web services","catchPhrase":"Multi-tiered zero tolerance productivity","name":"Robel-Corkery"}', 'Patricia Lebsack', 'Julianne.OConner@kory.org'),
-('(254)954-1289', 'demarco.info', 5, 'Kamren', '{"city":"Roscoeview","geo":{"lat":"-31.8129","lng":"62.5342"},"street":"Skiles Walks","suite":"Suite 351","zipcode":"33263"}', '{"bs":"revolutionize end-to-end systems","catchPhrase":"User-centric fault-tolerant solution","name":"Keebler LLC"}', 'Chelsey Dietrich', 'Lucio_Hettinger@annie.ca'),
-('1-477-935-8478 x6430', 'ola.org', 6, 'Leopoldo_Corkery', '{"city":"South Christy","geo":{"lat":"-71.4197","lng":"71.7478"},"street":"Norberto Crossing","suite":"Apt. 950","zipcode":"23505-1337"}', '{"bs":"e-enable innovative applications","catchPhrase":"Synchronised bottom-line interface","name":"Considine-Lockman"}', 'Mrs. Dennis Schulist', 'Karley_Dach@jasper.info'),
-('210.067.6132', 'elvis.io', 7, 'Elwyn.Skiles', '{"city":"Howemouth","geo":{"lat":"24.8918","lng":"21.8984"},"street":"Rex Trail","suite":"Suite 280","zipcode":"58804-1099"}', '{"bs":"generate enterprise e-tailers","catchPhrase":"Configurable multimedia task-force","name":"Johns Group"}', 'Kurtis Weissnat', 'Telly.Hoeger@billy.biz'),
-('586.493.6943 x140', 'jacynthe.com', 8, 'Maxime_Nienow', '{"city":"Aliyaview","geo":{"lat":"-14.3990","lng":"-120.7677"},"street":"Ellsworth Summit","suite":"Suite 729","zipcode":"45169"}', '{"bs":"e-enable extensible e-tailers","catchPhrase":"Implemented secondary concept","name":"Abernathy Group"}', 'Nicholas Runolfsdottir V', 'Sherwood@rosamond.me'),
-('(775)976-6794 x41206', 'conrad.com', 9, 'Delphine', '{"city":"Bartholomebury","geo":{"lat":"24.6463","lng":"-168.8889"},"street":"Dayna Park","suite":"Suite 449","zipcode":"76495-3109"}', '{"bs":"aggregate real-time technologies","catchPhrase":"Switchable contextually-based project","name":"Yost and Sons"}', 'Glenna Reichert', 'Chaim_McDermott@dana.io'),
-('024-648-3804', 'ambrose.net', 10, 'Moriah.Stanton', '{"city":"Lebsackbury","geo":{"lat":"-38.2386","lng":"57.2232"},"street":"Kattie Turnpike","suite":"Suite 198","zipcode":"31428-2261"}', '{"bs":"target end-to-end models","catchPhrase":"Centralized empowering task-force","name":"Hoeger LLC"}', 'Clementina DuBuque', 'Rey.Padberg@karina.biz');
+CREATE TABLE "addresses" (
+  "id" INTEGER PRIMARY KEY,
+  "geo_id" INTEGER,
+  "street" TEXT,
+  "suite" TEXT,
+  "zipcode" TEXT,
+  "city" TEXT,
+  FOREIGN KEY ("geo_id") REFERENCES "geos" ("id") ON DELETE CASCADE
+);
+
+CREATE TABLE "companies" (
+  "id" INTEGER PRIMARY KEY,
+  "bs" TEXT,
+  "catchPhrase" TEXT,
+  "name" TEXT
+);
+
+CREATE TABLE "userses" (
+  "id" INTEGER PRIMARY KEY,
+  "name" TEXT,
+  "username" TEXT,
+  "email" TEXT,
+  "address_id" INTEGER,
+  "phone" TEXT,
+  "website" TEXT,
+  "company_id" INTEGER,
+  FOREIGN KEY ("address_id") REFERENCES "addresses" ("id") ON DELETE CASCADE,
+  FOREIGN KEY ("company_id") REFERENCES "companies" ("id") ON DELETE CASCADE
+);
+
+INSERT INTO "geos" ("id", "lat", "lng") VALUES
+(31, '-37.3159', '81.1496'),
+(32, '-43.9509', '-34.4618'),
+(33, '-68.6102', '-47.0653'),
+(34, '29.4572', '-164.2990'),
+(35, '-31.8129', '62.5342'),
+(36, '-71.4197', '71.7478'),
+(37, '24.8918', '21.8984'),
+(38, '-14.3990', '-120.7677'),
+(39, '24.6463', '-168.8889'),
+(40, '-38.2386', '57.2232');
+
+
+INSERT INTO "addresses" ("id", "geo_id", "street", "suite", "zipcode", "city") VALUES
+(11, 31, 'Kulas Light', 'Apt. 556', '92998-3874', 'Gwenborough'),
+(12, 32, 'Victor Plains', 'Suite 879', '90566-7771', 'Wisokyburgh'),
+(13, 33, 'Douglas Extension', 'Suite 847', '59590-4157', 'McKenziehaven'),
+(14, 34, 'Hoeger Mall', 'Apt. 692', '53919-4257', 'South Elvis'),
+(15, 35, 'Skiles Walks', 'Suite 351', '33263', 'Roscoeview'),
+(16, 36, 'Norberto Crossing', 'Apt. 950', '23505-1337', 'South Christy'),
+(17, 37, 'Rex Trail', 'Suite 280', '58804-1099', 'Howemouth'),
+(18, 38, 'Ellsworth Summit', 'Suite 729', '45169', 'Aliyaview'),
+(19, 39, 'Dayna Park', 'Suite 449', '76495-3109', 'Bartholomebury'),
+(20, 40, 'Kattie Turnpike', 'Suite 198', '31428-2261', 'Lebsackbury');
+
+
+INSERT INTO "companies" ("id", "bs", "catchPhrase", "name") VALUES
+(21, 'harness real-time e-markets', 'Multi-layered client-server neural-net', 'Romaguera-Crona'),
+(22, 'synergize scalable supply-chains', 'Proactive didactic contingency', 'Deckow-Crist'),
+(23, 'e-enable strategic applications', 'Face to face bifurcated interface', 'Romaguera-Jacobson'),
+(24, 'transition cutting-edge web services', 'Multi-tiered zero tolerance productivity', 'Robel-Corkery'),
+(25, 'revolutionize end-to-end systems', 'User-centric fault-tolerant solution', 'Keebler LLC'),
+(26, 'e-enable innovative applications', 'Synchronised bottom-line interface', 'Considine-Lockman'),
+(27, 'generate enterprise e-tailers', 'Configurable multimedia task-force', 'Johns Group'),
+(28, 'e-enable extensible e-tailers', 'Implemented secondary concept', 'Abernathy Group'),
+(29, 'aggregate real-time technologies', 'Switchable contextually-based project', 'Yost and Sons'),
+(30, 'target end-to-end models', 'Centralized empowering task-force', 'Hoeger LLC');
+
+
+INSERT INTO "userses" ("id", "name", "username", "email", "address_id", "phone", "website", "company_id") VALUES
+(1, 'Leanne Graham', 'Bret', 'Sincere@april.biz', 11, '1-770-736-8031 x56442', 'hildegard.org', 21),
+(2, 'Ervin Howell', 'Antonette', 'Shanna@melissa.tv', 12, '010-692-6593 x09125', 'anastasia.net', 22),
+(3, 'Clementine Bauch', 'Samantha', 'Nathan@yesenia.net', 13, '1-463-123-4447', 'ramiro.info', 23),
+(4, 'Patricia Lebsack', 'Karianne', 'Julianne.OConner@kory.org', 14, '493-170-9623 x156', 'kale.biz', 24),
+(5, 'Chelsey Dietrich', 'Kamren', 'Lucio_Hettinger@annie.ca', 15, '(254)954-1289', 'demarco.info', 25),
+(6, 'Mrs. Dennis Schulist', 'Leopoldo_Corkery', 'Karley_Dach@jasper.info', 16, '1-477-935-8478 x6430', 'ola.org', 26),
+(7, 'Kurtis Weissnat', 'Elwyn.Skiles', 'Telly.Hoeger@billy.biz', 17, '210.067.6132', 'elvis.io', 27),
+(8, 'Nicholas Runolfsdottir V', 'Maxime_Nienow', 'Sherwood@rosamond.me', 18, '586.493.6943 x140', 'jacynthe.com', 28),
+(9, 'Glenna Reichert', 'Delphine', 'Chaim_McDermott@dana.io', 19, '(775)976-6794 x41206', 'conrad.com', 29),
+(10, 'Clementina DuBuque', 'Moriah.Stanton', 'Rey.Padberg@karina.biz', 20, '024-648-3804', 'ambrose.net', 30);
+

diff --git a/internal/dialects/dialect.go b/internal/dialects/dialect.go
index 9eced6f..e116e5a 100644
--- a/internal/dialects/dialect.go
+++ b/internal/dialects/dialect.go
@@ -17,9 +17,12 @@ const (
 )

 type ColumnDef struct {
-       Name     string
-       Type     SQLType
-       Nullable bool
+       Name         string
+       Type         SQLType
+       Nullable     bool
+       IsPrimaryKey bool
+       IsForeignKey bool
+       References   string // Referenced table.column
 }

 type Dialect interface {
diff --git a/internal/dialects/generic.go b/internal/dialects/generic.go
index 43aa574..30c8389 100644
--- a/internal/dialects/generic.go
+++ b/internal/dialects/generic.go
@@ -24,6 +24,7 @@ func (d *GenericDialect) CreateTable(tableName string, columns []ColumnDef) stri
        sb.WriteString(d.QuoteIdentifier(tableName))
        sb.WriteString(" (\n")

+       // First add all columns
        for i, col := range columns {
                if i > 0 {
                        sb.WriteString(",\n")
@@ -34,11 +35,34 @@ func (d *GenericDialect) CreateTable(tableName string, columns []ColumnDef) stri
                sb.WriteString(" ")
                sb.WriteString(string(col.Type))

-               if !col.Nullable {
+               if col.IsPrimaryKey {
+                       sb.WriteString(" PRIMARY KEY")
+               } else if !col.Nullable {
                        sb.WriteString(" NOT NULL")
                }
        }

+       // Then add foreign key constraints
+       for _, col := range columns {
+               if col.IsForeignKey && col.References != "" {
+                       // Parse the reference (table.column)
+                       parts := strings.Split(col.References, ".")
+                       if len(parts) != 2 {
+                               continue
+                       }
+                       refTable := parts[0]
+                       refColumn := parts[1]
+
+                       sb.WriteString(",\n  FOREIGN KEY (")
+                       sb.WriteString(d.QuoteIdentifier(col.Name))
+                       sb.WriteString(") REFERENCES ")
+                       sb.WriteString(d.QuoteIdentifier(refTable))
+                       sb.WriteString(" (")
+                       sb.WriteString(d.QuoteIdentifier(refColumn))
+                       sb.WriteString(")")
+               }
+       }
+
        sb.WriteString("\n);\n")

        return sb.String()
diff --git a/internal/processing/sql_generator.go b/internal/processing/sql_generator.go
index 199cfba..0df32a2 100644
--- a/internal/processing/sql_generator.go
+++ b/internal/processing/sql_generator.go
@@ -44,7 +44,19 @@ func NewSQLGenerator(options SQLGeneratorOptions) (*SQLGenerator, error) {
 }

 func (g *SQLGenerator) Generate(dataset *common.DataSet) (string, error) {
+       // Check if we need to handle nested objects
+       hasNestedObjects := g.hasNestedObjects(dataset)
+
+       if hasNestedObjects {
+               // Use the nested JSON processor for nested objects
+               processor, err := NewNestedJSONProcessor(g.options)
+               if err != nil {
+                       return "", err
+               }
+               return processor.ProcessDataSet(dataset)
+       }

+       // Original implementation for flat data
        columns := dataset.Columns
        if g.options.NormalizeColumns {
                columns = g.normalizer.NormalizeColumnNames(columns)
@@ -66,7 +78,6 @@ func (g *SQLGenerator) Generate(dataset *common.DataSet) (string, error) {
        var sql string

        if g.options.CreateTable {
-
                columnTypes := g.typeInferer.InferColumnTypes(columns, dataset.Rows)

                columnDefs := make([]dialects.ColumnDef, len(columns))
@@ -95,3 +106,26 @@ func (g *SQLGenerator) Generate(dataset *common.DataSet) (string, error) {

        return sql, nil
 }
+
+// hasNestedObjects checks if the dataset contains nested objects
+func (g *SQLGenerator) hasNestedObjects(dataset *common.DataSet) bool {
+       // Check each row for nested objects
+       for _, row := range dataset.Rows {
+               for _, value := range row {
+                       // Check if it's a map
+                       if _, ok := value.(map[string]interface{}); ok {
+                               return true
+                       }
+
+                       // Check if it's a JSON string that contains an object
+                       if strValue, ok := value.(string); ok {
+                               // If it starts with { and ends with }, it might be a JSON object
+                               if len(strValue) > 1 && strValue[0] == '{' && strValue[len(strValue)-1] == '}' {
+                                       return true
+                               }
+                       }
+               }
+       }
+
+       return false
+}